{"version":3,"sources":["species.js","SpeciesList.js","Form.js","RelevantVillagers.js","ShowInfo.js","App.js","serviceWorker.js","index.js"],"names":["villagerSpecies","type","SpeciesList","disabled","value","map","species","index","key","Component","Form","handleChange","event","setState","userSelection","target","state","this","onChange","onClick","props","filterVillagers","RelevantVillagers","id","showInfo","src","icon","alt","name","ShowInfo","personality","birthday","catchphrase","App","preventDefault","relVillagers","villagers","filter","villager","hideInfo","newEvent","clickedVillager","axios","url","method","responseType","then","response","data","newState","push","image","className","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.948377d8.chunk.js","sourcesContent":["const villagerSpecies = [\n    { type: 'Alligator' },\n    { type: 'Anteater' },\n    { type: 'Bird' },\n    { type: 'Bear' },\n    { type: 'Cat' },\n    { type: 'Chicken' },\n    { type: 'Cow' },\n    { type: 'Cub' },\n    { type: 'Deer' },\n    { type: 'Dog' },\n    { type: 'Duck' },\n    { type: 'Eagle' },\n    { type: 'Elephant' },\n    { type: 'Frog' },\n    { type: 'Goat' },\n    { type: 'Hamster' },\n    { type: 'Hippo' },\n    { type: 'Horse' },\n    { type: 'Koala' },\n    { type: 'Kangaroo' },\n    { type: 'Lion' },\n    { type: 'Monkey' },\n    { type: 'Mouse' },\n    { type: 'Octopus' },\n    { type: 'Penguin' },\n    { type: 'Pig' },\n    { type: 'Rabbit' },\n    { type: 'Rhino' },\n    { type: 'Sheep' },\n    { type: 'Squirrel' },\n    { type: 'Tiger' },\n    { type: 'Wolf' }\n]\n\nexport default villagerSpecies;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport villagerSpecies from './species';\n\nclass SpeciesList extends Component {\n    render() {\n        return (\n            <Fragment>\n                <option disabled value=\"\">Select A Species</option>\n                {   \n                    villagerSpecies.map((species, index) => {\n                        return (\n                            <option key={index} value={species.type}>{species.type}</option>\n                        )\n                    })\n                }\n            </Fragment>\n        );\n    }\n}\n\nexport default SpeciesList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SpeciesList from './SpeciesList';\n\nclass Form extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            userSelection: '',\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            userSelection: event.target.value,\n        })\n    }\n\n    render() {\n        return (\n            <form>\n                <select value={this.state.userSelection} onChange={this.handleChange}>\n                    <SpeciesList />\n                </select>\n                <button onClick={(event) => this.props.filterVillagers(event, this.state.userSelection)}>Display!</button>\n            </form>\n        );\n    }\n\n    // render() {\n    //     return (\n    //         <form>\n    //             <select onChange={this.handleChange} id=\"species\" name=\"userSelection\">\n    //                 <option value=\"Clear\">No Selection</option>\n    //                 <option value=\"Alligator\">Alligator</option>\n    //                 <option value=\"Anteater\">Anteater</option>\n    //                 <option value=\"Bird\">Bird</option>\n    //                 <option value=\"Bear\">Bear</option>\n    //                 <option value=\"Cat\">Cat</option>\n    //                 <option value=\"Chicken\">Chicken</option>\n    //                 <option value=\"Cow\">Cow</option>\n    //                 <option value=\"Cub\">Cub</option>\n    //                 <option value=\"Deer\">Deer</option>\n    //                 <option value=\"Dog\">Dog</option>\n    //                 <option value=\"Duck\">Duck</option>\n    //                 <option value=\"Eagle\">Eagle</option>\n    //                 <option value=\"Elephant\">Elephant</option>\n    //                 <option value=\"Frog\">Frog</option>\n    //                 <option value=\"Goat\">Goat</option>\n    //                 <option value=\"Hamster\">Hamster</option>\n    //                 <option value=\"Hippo\">Hippo</option>\n    //                 <option value=\"Horse\">Horse</option>\n    //                 <option value=\"Koala\">Koala</option>\n    //                 <option value=\"Kangaroo\">Kangaroo</option>\n    //                 <option value=\"Lion\">Lion</option>\n    //                 <option value=\"Monkey\">Monkey</option>\n    //                 <option value=\"Mouse\">Mouse</option>\n    //                 <option value=\"Octopus\">Octopus</option>\n    //                 <option value=\"Penguin\">Penguin</option>\n    //                 <option value=\"Pig\">Pig</option>\n    //                 <option value=\"Rabbit\">Rabbit</option>\n    //                 <option value=\"Rhino\">Rhino</option>\n    //                 <option value=\"Sheep\">Sheep</option>\n    //                 <option value=\"Squirrel\">Squirrel</option>\n    //                 <option value=\"Tiger\">Tiger</option>\n    //                 <option value=\"Wolf\">Wolf</option>\n    //             </select>\n    //         </form>\n    //     );\n    // }\n}\n\nexport default Form;","import React, { Component, Fragment } from 'react';\nimport './App.css';\n\n\n\nclass RelevantVillagers extends Component {\n\n    render() {\n        return (\n            <Fragment>\n                <li>\n                    <button key={this.props.id} onClick={(event) => this.props.showInfo(event, this.props.id)}>\n                        <img src={this.props.icon} alt={this.props.name}></img>\n                        <p>{this.props.name}</p>\n                    </button>\n                </li>   \n            </Fragment> \n        );\n    }   \n}\n\n\nexport default RelevantVillagers;\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\n\nclass ShowInfo extends Component {\n    render() {\n        return (\n            <Fragment>\n                <li key={this.props.id}>\n                    <p>personality: {this.props.personality}</p>\n                    <p>birthday: {this.props.birthday}</p>\n                    <p>catchphrase: \"{this.props.catchphrase}\"</p>\n                </li>\n            </Fragment>\n        );\n    }\n}\n\n\nexport default ShowInfo;\n\n\n\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Form from './Form';\nimport RelevantVillagers from './RelevantVillagers';\nimport ShowInfo from './ShowInfo';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      villagers: [],\n      relVillagers: [],\n      hideInfo: true,\n      clickedVillager: []\n    }\n  }\n\n  componentDidMount() {\n    axios({\n      url: 'https://acnhapi.com/v1/villagers/',\n      method: 'GET',\n      responseType: 'json',\n    }).then((response) => { \n\n      const data = response.data;\n\n      const newState = [];\n\n      for (let key in data) {\n        newState.push({\n          id: key,\n          name: data[key]['name']['name-USen'],\n          personality: data[key]['personality'],\n          birthday: data[key]['birthday-string'],\n          catchphrase: data[key]['catch-phrase'],\n          icon: data[key]['icon_uri'],\n          image: data[key]['image_uri'],\n          species: data[key]['species'],\n        })\n      }\n\n      this.setState({\n        villagers: newState\n      })\n    } \n  )}\n\n  filterVillagers = (event, userSelection) => {\n    event.preventDefault();\n    const copyOfVillagers = [...this.state.villagers];\n    const relVillagers = copyOfVillagers.filter((villager) => villager.species == userSelection)\n    this.setState({\n      relVillagers: relVillagers\n    })\n    this.setState({\n      hideInfo: true\n    })\n  }\n\n  showInfo = (newEvent, id) => {\n    newEvent.preventDefault();\n    this.setState({\n      hideInfo: false\n    })\n    const copyOfRelVillagers = [...this.state.relVillagers];\n    const clickedVillager = copyOfRelVillagers.filter((villager) => villager.id == id)\n    this.setState({\n      clickedVillager: clickedVillager\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <div className=\"wrapper\">\n            <h1>ACNH Villager App</h1>\n          </div>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <Form filterVillagers={this.filterVillagers} />\n            <ul>\n              {this.state.hideInfo == false ? (this.state.clickedVillager.map(({ id, image, name, personality, birthday, catchphrase }) => {\n                return <div>\n                  <RelevantVillagers showInfo={this.showInfo} id={id} icon={image} name={name} />\n                  <ShowInfo id={id} personality={personality} birthday={birthday} catchphrase={catchphrase} />\n                </div>\n              })\n              ) : (this.state.relVillagers.map(({ id, icon, name }) => {\n                return <RelevantVillagers showInfo={this.showInfo} id={id} icon={icon} name={name} />\n              })\n              )}\n            </ul>\n          </div>\n        </main>\n        <footer>\n          <div className=\"wrapper\">\n            <p>Made with <span role=\"img\" aria-label=\"\">💖</span> by Tabitha Poeze</p>\n          </div>\n        </footer>\n      </Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}